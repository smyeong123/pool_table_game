/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputFilter;
import java.security.Key;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.TilePane;
import javafx.scene.text.Text;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import javafx.util.Duration;

/** The JavaFX application */
public class App extends Application {

    public static final double FRAMETIME = 1.0 / 60.0;
    public static boolean gameStarted = false;

    public static Game game;

    public int configOpt;

    public static ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
		if (args.size() > 0) {
			configPath = args.get(0);
		} else {
//			 configPath = "src/main/resources/config_hard.json";
			configPath = "/config.json";
            isResourcesDir = true;
		}
		// parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ConfigKeyMissingException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }


        public void runAfterClick(Group root, Stage stage, ConfigReader config) {
        Game game = new Game(config);
        this.game = game;
        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());
        stage.setWidth(game.getWindowDimX());
        stage.setHeight(game.getWindowDimY() +
                Pocket.RADIUS +
                PoolTable.POCKET_OFFSET +
                4); // Magic number to get bottom to align

//
        root.getChildren().add(canvas);

//         GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
                (actionEvent) -> {
                    game.tick();
                });
        timeline.getKeyFrames().add(frame);
        gameStarted = true;
        timeline.play();
    }

    @Override
    public void start(Stage stage) {
        Group root = new Group();

        Button b1 = new Button("Easy");
        Button b2 = new Button("Normal");
        Button b3 = new Button("Hard");


        b1.relocate(50,50);
        b2.relocate(50,150);
        b3.relocate(50,250);

        root.getChildren().add(b1);
        root.getChildren().add(b2);
        root.getChildren().add(b3);
        Scene scene = new Scene(root, 500, 500);

        stage.setScene(scene);

        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
//                if (gameStarted && game.allBallsStopped() && !game.rollBacked) {
                if (gameStarted) {

                    KeyCode rst = event.getCode();
                    if (rst == KeyCode.Z) {
                        System.out.println("roll backing");
                        game.rollBack(game.caretaker.getMemento());
                    }else if (rst == KeyCode.R) {
                        //remove redBall
                        game.cheatBall("red");
                    }else if (rst == KeyCode.Y) {
                        //remove yellowBall
                        game.cheatBall("yellow");
                    }else if (rst == KeyCode.G) {
                        //remove greenball
                        game.cheatBall("green");
                    }else if (rst == KeyCode.B) {
                        //remove brownball
                        game.cheatBall("brown");
                    }else if (rst == KeyCode.E) {
                        //remove blueBall
                        game.cheatBall("blue");
                    }else if (rst == KeyCode.P) {
                        //remove purpleBall
                        game.cheatBall("purple");
                    }else if (rst == KeyCode.L) {
                        //remove blackball
                        game.cheatBall("black");
                    }else if (rst == KeyCode.O) {
                        //remove orangeball
                        game.cheatBall("orange");
                    }

                }
            }
        });



        stage.setTitle("PoolGame");
        stage.show();



        EventHandler<MouseEvent> b1Handler = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
//                ConfigReader config = loadConfig(getParameters().getRaw());
                configOpt = 1;
                DifficultySingleton singleton = DifficultySingleton.getInstance();
                ConfigReader config = loadConfig(Arrays.asList(singleton.getPath(configOpt)));
                runAfterClick(root, stage, config);
            }
        };
        EventHandler<MouseEvent> b2Handler = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                configOpt = 2;
                DifficultySingleton singleton = DifficultySingleton.getInstance();
                ConfigReader config = loadConfig(Arrays.asList(singleton.getPath(configOpt)));
                runAfterClick(root, stage, config);
            }
        };
        EventHandler<MouseEvent> b3Handler = new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent e) {
                configOpt = 3;
                DifficultySingleton singleton = DifficultySingleton.getInstance();
                ConfigReader config = loadConfig(Arrays.asList(singleton.getPath(configOpt)));
                runAfterClick(root, stage, config);
            }
        };

        b1.addEventFilter(MouseEvent.MOUSE_CLICKED, b1Handler);
        b2.addEventFilter(MouseEvent.MOUSE_CLICKED, b2Handler);
        b3.addEventFilter(MouseEvent.MOUSE_CLICKED, b3Handler);

    }

    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
